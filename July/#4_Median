class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        A, B =  nums1, nums2      
        total = len(nums1) + len(nums2)
        half = total // 2
        
        if len(B) < len(A):
            A, B = B, A
        l, r = 0, len(A) - 1 

        while True:
            i = (l + r) // 2  # A
            j = half - i - 2  # B

            Al = A[i] if i >= 0 else float("-infinityinity")
            Ar = A[i + 1] if (i + 1) < len(A) else float ("infinity")
            Bl = B[j] if j >= 0 else float("-infinityinity")
            Br = B[j + 1] if (j + 1) < len(B) else float ("infinity")

            # partition is correct
            if Al <= Br and Bl <= Ar:
                # odd
                if total % 2:
                    return min(Ar, Br)
                # even
                # This thing 2.0 should be included not 2, maybe on the old version
                return (max(Al, Bl) + min(Ar, Br)) / 2.0
            elif Al > Br:
                r = i - 1
            else:
                l = i + 1
